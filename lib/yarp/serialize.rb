# frozen_string_literal: true
=begin
This file is generated by the bin/template script and should not be
modified manually. See bin/templates/lib/yarp/serialize.rb.erb
if you are looking to modify the template
=end

require "stringio"

module YARP
  module Serialize
    def self.load(source, serialized)
      io = StringIO.new(serialized)
      io.set_encoding(Encoding::BINARY)

      Loader.new(source, serialized, io).load
    end

    class Loader
      attr_reader :encoding, :source, :serialized, :io
      attr_reader :constant_pool_offset, :constant_pool

      def initialize(source, serialized, io)
        # TODO: This is wrong, we should be dumping and loading the encoding.
        # For now, we assume that the source is UTF-8.
        @encoding = Encoding::UTF_8
        @source = source.dup.force_encoding(@encoding).freeze
        @serialized = serialized
        @io = io
      end

      def load
        io.read(4) => "YARP"
        io.read(3).unpack("C3") => [0, 4, 0]

        @constant_pool_offset = io.read(4).unpack1("L")
        @constant_pool = Array.new(load_varint, nil)

        load_node
      end

      private

      # variable-length integer using https://en.wikipedia.org/wiki/LEB128
      # This is also what protobuf uses: https://protobuf.dev/programming-guides/encoding/#varints
      def load_varint
        n = io.getbyte
        if n < 128
          n
        else
          n -= 128
          shift = 0
          while (b = io.getbyte) >= 128
            n += (b - 128) << (shift += 7)
          end
          n + (b << (shift + 7))
        end
      end

      def load_serialized_length
        io.read(4).unpack1("L")
      end

      def load_token
        type =
          case io.getbyte
          when 1 then :"EOF"
          when 2 then :"MISSING"
          when 3 then :"NOT_PROVIDED"
          when 4 then :"AMPERSAND"
          when 5 then :"AMPERSAND_AMPERSAND"
          when 6 then :"AMPERSAND_AMPERSAND_EQUAL"
          when 7 then :"AMPERSAND_DOT"
          when 8 then :"AMPERSAND_EQUAL"
          when 9 then :"BACKTICK"
          when 10 then :"BACK_REFERENCE"
          when 11 then :"BANG"
          when 12 then :"BANG_EQUAL"
          when 13 then :"BANG_TILDE"
          when 14 then :"BRACE_LEFT"
          when 15 then :"BRACE_RIGHT"
          when 16 then :"BRACKET_LEFT"
          when 17 then :"BRACKET_LEFT_ARRAY"
          when 18 then :"BRACKET_LEFT_RIGHT"
          when 19 then :"BRACKET_LEFT_RIGHT_EQUAL"
          when 20 then :"BRACKET_RIGHT"
          when 21 then :"CARET"
          when 22 then :"CARET_EQUAL"
          when 23 then :"CHARACTER_LITERAL"
          when 24 then :"CLASS_VARIABLE"
          when 25 then :"COLON"
          when 26 then :"COLON_COLON"
          when 27 then :"COMMA"
          when 28 then :"COMMENT"
          when 29 then :"CONSTANT"
          when 30 then :"DOT"
          when 31 then :"DOT_DOT"
          when 32 then :"DOT_DOT_DOT"
          when 33 then :"EMBDOC_BEGIN"
          when 34 then :"EMBDOC_END"
          when 35 then :"EMBDOC_LINE"
          when 36 then :"EMBEXPR_BEGIN"
          when 37 then :"EMBEXPR_END"
          when 38 then :"EMBVAR"
          when 39 then :"EQUAL"
          when 40 then :"EQUAL_EQUAL"
          when 41 then :"EQUAL_EQUAL_EQUAL"
          when 42 then :"EQUAL_GREATER"
          when 43 then :"EQUAL_TILDE"
          when 44 then :"FLOAT"
          when 45 then :"GLOBAL_VARIABLE"
          when 46 then :"GREATER"
          when 47 then :"GREATER_EQUAL"
          when 48 then :"GREATER_GREATER"
          when 49 then :"GREATER_GREATER_EQUAL"
          when 50 then :"HEREDOC_END"
          when 51 then :"HEREDOC_START"
          when 52 then :"IDENTIFIER"
          when 53 then :"IGNORED_NEWLINE"
          when 54 then :"IMAGINARY_NUMBER"
          when 55 then :"INSTANCE_VARIABLE"
          when 56 then :"INTEGER"
          when 57 then :"KEYWORD_ALIAS"
          when 58 then :"KEYWORD_AND"
          when 59 then :"KEYWORD_BEGIN"
          when 60 then :"KEYWORD_BEGIN_UPCASE"
          when 61 then :"KEYWORD_BREAK"
          when 62 then :"KEYWORD_CASE"
          when 63 then :"KEYWORD_CLASS"
          when 64 then :"KEYWORD_DEF"
          when 65 then :"KEYWORD_DEFINED"
          when 66 then :"KEYWORD_DO"
          when 67 then :"KEYWORD_DO_LOOP"
          when 68 then :"KEYWORD_ELSE"
          when 69 then :"KEYWORD_ELSIF"
          when 70 then :"KEYWORD_END"
          when 71 then :"KEYWORD_END_UPCASE"
          when 72 then :"KEYWORD_ENSURE"
          when 73 then :"KEYWORD_FALSE"
          when 74 then :"KEYWORD_FOR"
          when 75 then :"KEYWORD_IF"
          when 76 then :"KEYWORD_IF_MODIFIER"
          when 77 then :"KEYWORD_IN"
          when 78 then :"KEYWORD_MODULE"
          when 79 then :"KEYWORD_NEXT"
          when 80 then :"KEYWORD_NIL"
          when 81 then :"KEYWORD_NOT"
          when 82 then :"KEYWORD_OR"
          when 83 then :"KEYWORD_REDO"
          when 84 then :"KEYWORD_RESCUE"
          when 85 then :"KEYWORD_RESCUE_MODIFIER"
          when 86 then :"KEYWORD_RETRY"
          when 87 then :"KEYWORD_RETURN"
          when 88 then :"KEYWORD_SELF"
          when 89 then :"KEYWORD_SUPER"
          when 90 then :"KEYWORD_THEN"
          when 91 then :"KEYWORD_TRUE"
          when 92 then :"KEYWORD_UNDEF"
          when 93 then :"KEYWORD_UNLESS"
          when 94 then :"KEYWORD_UNLESS_MODIFIER"
          when 95 then :"KEYWORD_UNTIL"
          when 96 then :"KEYWORD_UNTIL_MODIFIER"
          when 97 then :"KEYWORD_WHEN"
          when 98 then :"KEYWORD_WHILE"
          when 99 then :"KEYWORD_WHILE_MODIFIER"
          when 100 then :"KEYWORD_YIELD"
          when 101 then :"KEYWORD___ENCODING__"
          when 102 then :"KEYWORD___FILE__"
          when 103 then :"KEYWORD___LINE__"
          when 104 then :"LABEL"
          when 105 then :"LABEL_END"
          when 106 then :"LAMBDA_BEGIN"
          when 107 then :"LESS"
          when 108 then :"LESS_EQUAL"
          when 109 then :"LESS_EQUAL_GREATER"
          when 110 then :"LESS_LESS"
          when 111 then :"LESS_LESS_EQUAL"
          when 112 then :"MINUS"
          when 113 then :"MINUS_EQUAL"
          when 114 then :"MINUS_GREATER"
          when 115 then :"NEWLINE"
          when 116 then :"NTH_REFERENCE"
          when 117 then :"PARENTHESIS_LEFT"
          when 118 then :"PARENTHESIS_LEFT_PARENTHESES"
          when 119 then :"PARENTHESIS_RIGHT"
          when 120 then :"PERCENT"
          when 121 then :"PERCENT_EQUAL"
          when 122 then :"PERCENT_LOWER_I"
          when 123 then :"PERCENT_LOWER_W"
          when 124 then :"PERCENT_LOWER_X"
          when 125 then :"PERCENT_UPPER_I"
          when 126 then :"PERCENT_UPPER_W"
          when 127 then :"PIPE"
          when 128 then :"PIPE_EQUAL"
          when 129 then :"PIPE_PIPE"
          when 130 then :"PIPE_PIPE_EQUAL"
          when 131 then :"PLUS"
          when 132 then :"PLUS_EQUAL"
          when 133 then :"QUESTION_MARK"
          when 134 then :"RATIONAL_NUMBER"
          when 135 then :"REGEXP_BEGIN"
          when 136 then :"REGEXP_END"
          when 137 then :"SEMICOLON"
          when 138 then :"SLASH"
          when 139 then :"SLASH_EQUAL"
          when 140 then :"STAR"
          when 141 then :"STAR_EQUAL"
          when 142 then :"STAR_STAR"
          when 143 then :"STAR_STAR_EQUAL"
          when 144 then :"STRING_BEGIN"
          when 145 then :"STRING_CONTENT"
          when 146 then :"STRING_END"
          when 147 then :"SYMBOL_BEGIN"
          when 148 then :"TILDE"
          when 149 then :"UCOLON_COLON"
          when 150 then :"UDOT_DOT"
          when 151 then :"UDOT_DOT_DOT"
          when 152 then :"UMINUS"
          when 153 then :"UMINUS_NUM"
          when 154 then :"UPLUS"
          when 155 then :"USTAR"
          when 156 then :"USTAR_STAR"
          when 157 then :"WORDS_SEP"
          when 158 then :"__END__"
          end

        start_offset, length = load_varint, load_varint
        range = source.byteslice(start_offset, length)
        Token.new(type, range, start_offset, length)
      end

      def load_optional_node
        if io.getbyte != 0
          io.pos -= 1
          load_node
        end
      end

      def load_optional_token
        if io.getbyte != 0
          io.pos -= 1
          load_token
        end
      end

      def load_string
        io.read(load_varint).force_encoding(encoding)
      end

      def load_location
        Location.new(load_varint, load_varint)
      end

      def load_optional_location
        load_location if io.getbyte != 0
      end

      def load_constant
        index = load_varint - 1
        constant = constant_pool[index]

        unless constant
          offset = constant_pool_offset + index * 8

          start = serialized.unpack1("L", offset: offset)
          length = serialized.unpack1("L", offset: offset + 4)

          constant = source.byteslice(start, length).to_sym
          constant_pool[index] = constant
        end

        constant
      end

      def load_node
        type = io.getbyte
        start_offset, length = load_varint, load_varint

        case type
        when 1 then
          AliasNode.new(load_node, load_node, load_location, start_offset, length)
        when 2 then
          AlternationPatternNode.new(load_node, load_node, load_location, start_offset, length)
        when 3 then
          AndNode.new(load_node, load_node, load_location, start_offset, length)
        when 4 then
          ArgumentsNode.new(Array.new(load_varint) { load_node }, start_offset, length)
        when 5 then
          ArrayNode.new(Array.new(load_varint) { load_node }, load_optional_location, load_optional_location, start_offset, length)
        when 6 then
          ArrayPatternNode.new(load_optional_node, Array.new(load_varint) { load_node }, load_optional_node, Array.new(load_varint) { load_node }, load_optional_location, load_optional_location, start_offset, length)
        when 7 then
          AssocNode.new(load_node, load_optional_node, load_optional_location, start_offset, length)
        when 8 then
          AssocSplatNode.new(load_optional_node, load_location, start_offset, length)
        when 9 then
          BeginNode.new(load_optional_location, load_optional_node, load_optional_node, load_optional_node, load_optional_node, load_optional_location, start_offset, length)
        when 10 then
          BlockArgumentNode.new(load_optional_node, load_location, start_offset, length)
        when 11 then
          BlockNode.new(Array.new(load_varint) { load_constant }, load_optional_node, load_optional_node, load_location, load_location, start_offset, length)
        when 12 then
          BlockParameterNode.new(load_optional_location, load_location, start_offset, length)
        when 13 then
          BlockParametersNode.new(load_optional_node, Array.new(load_varint) { load_token }, load_optional_location, load_optional_location, start_offset, length)
        when 14 then
          BreakNode.new(load_optional_node, load_location, start_offset, length)
        when 15 then
          CallNode.new(load_optional_node, load_optional_token, load_optional_token, load_optional_token, load_optional_node, load_optional_token, load_optional_node, load_string, start_offset, length)
        when 16 then
          CapturePatternNode.new(load_node, load_node, load_location, start_offset, length)
        when 17 then
          CaseNode.new(load_optional_node, Array.new(load_varint) { load_node }, load_optional_node, load_location, load_location, start_offset, length)
        when 18 then
          ClassNode.new(Array.new(load_varint) { load_constant }, load_location, load_node, load_optional_location, load_optional_node, load_optional_node, load_location, start_offset, length)
        when 19 then
          ClassVariableReadNode.new(start_offset, length)
        when 20 then
          ClassVariableWriteNode.new(load_location, load_optional_node, load_optional_location, start_offset, length)
        when 21 then
          ConstantPathNode.new(load_optional_node, load_node, load_location, start_offset, length)
        when 22 then
          ConstantPathWriteNode.new(load_node, load_optional_location, load_optional_node, start_offset, length)
        when 23 then
          ConstantReadNode.new(start_offset, length)
        when 24 then
          load_serialized_length
          DefNode.new(load_location, load_optional_node, load_optional_node, load_optional_node, Array.new(load_varint) { load_constant }, load_location, load_optional_location, load_optional_location, load_optional_location, load_optional_location, load_optional_location, start_offset, length)
        when 25 then
          DefinedNode.new(load_optional_location, load_node, load_optional_location, load_location, start_offset, length)
        when 26 then
          ElseNode.new(load_location, load_optional_node, load_optional_location, start_offset, length)
        when 27 then
          EnsureNode.new(load_location, load_optional_node, load_location, start_offset, length)
        when 28 then
          FalseNode.new(start_offset, length)
        when 29 then
          FindPatternNode.new(load_optional_node, load_node, Array.new(load_varint) { load_node }, load_node, load_optional_location, load_optional_location, start_offset, length)
        when 30 then
          FloatNode.new(start_offset, length)
        when 31 then
          ForNode.new(load_node, load_node, load_optional_node, load_location, load_location, load_optional_location, load_location, start_offset, length)
        when 32 then
          ForwardingArgumentsNode.new(start_offset, length)
        when 33 then
          ForwardingParameterNode.new(start_offset, length)
        when 34 then
          ForwardingSuperNode.new(load_optional_node, start_offset, length)
        when 35 then
          GlobalVariableReadNode.new(load_token, start_offset, length)
        when 36 then
          GlobalVariableWriteNode.new(load_token, load_optional_location, load_optional_node, start_offset, length)
        when 37 then
          HashNode.new(load_location, Array.new(load_varint) { load_node }, load_location, start_offset, length)
        when 38 then
          HashPatternNode.new(load_optional_node, Array.new(load_varint) { load_node }, load_optional_node, load_optional_location, load_optional_location, start_offset, length)
        when 39 then
          IfNode.new(load_location, load_node, load_optional_node, load_optional_node, load_optional_location, start_offset, length)
        when 40 then
          ImaginaryNode.new(load_node, start_offset, length)
        when 41 then
          InNode.new(load_node, load_optional_node, load_location, load_optional_location, start_offset, length)
        when 42 then
          InstanceVariableReadNode.new(start_offset, length)
        when 43 then
          InstanceVariableWriteNode.new(load_location, load_optional_node, load_optional_location, start_offset, length)
        when 44 then
          IntegerNode.new(start_offset, length)
        when 45 then
          InterpolatedRegularExpressionNode.new(load_location, Array.new(load_varint) { load_node }, load_location, load_varint, start_offset, length)
        when 46 then
          InterpolatedStringNode.new(load_optional_location, Array.new(load_varint) { load_node }, load_optional_location, start_offset, length)
        when 47 then
          InterpolatedSymbolNode.new(load_optional_token, Array.new(load_varint) { load_node }, load_optional_token, start_offset, length)
        when 48 then
          InterpolatedXStringNode.new(load_location, Array.new(load_varint) { load_node }, load_location, start_offset, length)
        when 49 then
          KeywordHashNode.new(Array.new(load_varint) { load_node }, start_offset, length)
        when 50 then
          KeywordParameterNode.new(load_location, load_optional_node, start_offset, length)
        when 51 then
          KeywordRestParameterNode.new(load_location, load_optional_location, start_offset, length)
        when 52 then
          LambdaNode.new(Array.new(load_varint) { load_constant }, load_location, load_optional_node, load_optional_node, start_offset, length)
        when 53 then
          LocalVariableReadNode.new(load_constant, load_varint, start_offset, length)
        when 54 then
          LocalVariableWriteNode.new(load_constant, load_varint, load_optional_node, load_location, load_optional_location, start_offset, length)
        when 55 then
          MatchPredicateNode.new(load_node, load_node, load_location, start_offset, length)
        when 56 then
          MatchRequiredNode.new(load_node, load_node, load_location, start_offset, length)
        when 57 then
          MissingNode.new(start_offset, length)
        when 58 then
          ModuleNode.new(Array.new(load_varint) { load_constant }, load_location, load_node, load_optional_node, load_location, start_offset, length)
        when 59 then
          MultiWriteNode.new(Array.new(load_varint) { load_node }, load_optional_location, load_optional_node, load_optional_location, load_optional_location, start_offset, length)
        when 60 then
          NextNode.new(load_optional_node, load_location, start_offset, length)
        when 61 then
          NilNode.new(start_offset, length)
        when 62 then
          NoKeywordsParameterNode.new(load_location, load_location, start_offset, length)
        when 63 then
          OperatorAndAssignmentNode.new(load_node, load_node, load_location, start_offset, length)
        when 64 then
          OperatorAssignmentNode.new(load_node, load_token, load_node, start_offset, length)
        when 65 then
          OperatorOrAssignmentNode.new(load_node, load_node, load_location, start_offset, length)
        when 66 then
          OptionalParameterNode.new(load_constant, load_location, load_location, load_node, start_offset, length)
        when 67 then
          OrNode.new(load_node, load_node, load_location, start_offset, length)
        when 68 then
          ParametersNode.new(Array.new(load_varint) { load_node }, Array.new(load_varint) { load_node }, Array.new(load_varint) { load_node }, load_optional_node, Array.new(load_varint) { load_node }, load_optional_node, load_optional_node, start_offset, length)
        when 69 then
          ParenthesesNode.new(load_optional_node, load_location, load_location, start_offset, length)
        when 70 then
          PinnedExpressionNode.new(load_node, load_location, load_location, load_location, start_offset, length)
        when 71 then
          PinnedVariableNode.new(load_node, load_location, start_offset, length)
        when 72 then
          PostExecutionNode.new(load_node, load_location, load_location, load_location, start_offset, length)
        when 73 then
          PreExecutionNode.new(load_node, load_location, load_location, load_location, start_offset, length)
        when 74 then
          ProgramNode.new(Array.new(load_varint) { load_constant }, load_node, start_offset, length)
        when 75 then
          RangeNode.new(load_optional_node, load_optional_node, load_location, start_offset, length)
        when 76 then
          RationalNode.new(load_node, start_offset, length)
        when 77 then
          RedoNode.new(start_offset, length)
        when 78 then
          RegularExpressionNode.new(load_location, load_location, load_location, load_string, load_varint, start_offset, length)
        when 79 then
          RequiredDestructuredParameterNode.new(Array.new(load_varint) { load_node }, load_location, load_location, start_offset, length)
        when 80 then
          RequiredParameterNode.new(load_constant, start_offset, length)
        when 81 then
          RescueModifierNode.new(load_node, load_location, load_node, start_offset, length)
        when 82 then
          RescueNode.new(load_location, Array.new(load_varint) { load_node }, load_optional_location, load_optional_node, load_optional_node, load_optional_node, start_offset, length)
        when 83 then
          RestParameterNode.new(load_location, load_optional_location, start_offset, length)
        when 84 then
          RetryNode.new(start_offset, length)
        when 85 then
          ReturnNode.new(load_location, load_optional_node, start_offset, length)
        when 86 then
          SelfNode.new(start_offset, length)
        when 87 then
          SingletonClassNode.new(Array.new(load_varint) { load_constant }, load_location, load_location, load_node, load_optional_node, load_location, start_offset, length)
        when 88 then
          SourceEncodingNode.new(start_offset, length)
        when 89 then
          SourceFileNode.new(load_string, start_offset, length)
        when 90 then
          SourceLineNode.new(start_offset, length)
        when 91 then
          SplatNode.new(load_location, load_optional_node, start_offset, length)
        when 92 then
          StatementsNode.new(Array.new(load_varint) { load_node }, start_offset, length)
        when 93 then
          StringConcatNode.new(load_node, load_node, start_offset, length)
        when 94 then
          StringInterpolatedNode.new(load_location, load_optional_node, load_location, start_offset, length)
        when 95 then
          StringNode.new(load_optional_location, load_location, load_optional_location, load_string, start_offset, length)
        when 96 then
          SuperNode.new(load_location, load_optional_location, load_optional_node, load_optional_location, load_optional_node, start_offset, length)
        when 97 then
          SymbolNode.new(load_optional_token, load_token, load_optional_token, load_string, start_offset, length)
        when 98 then
          TrueNode.new(start_offset, length)
        when 99 then
          UndefNode.new(Array.new(load_varint) { load_node }, load_location, start_offset, length)
        when 100 then
          UnlessNode.new(load_location, load_node, load_optional_node, load_optional_node, load_optional_location, start_offset, length)
        when 101 then
          UntilNode.new(load_location, load_node, load_optional_node, start_offset, length)
        when 102 then
          WhenNode.new(load_location, Array.new(load_varint) { load_node }, load_optional_node, start_offset, length)
        when 103 then
          WhileNode.new(load_location, load_node, load_optional_node, start_offset, length)
        when 104 then
          XStringNode.new(load_location, load_location, load_location, load_string, start_offset, length)
        when 105 then
          YieldNode.new(load_location, load_optional_location, load_optional_node, load_optional_location, start_offset, length)
        end
      end
    end
  end
end
