March 6, 2024

* Fixed linker for linux and macos

Current failing builds:

* MinGW - `undefined method gsub'`. LIBRUBYGC isn't defined.
* VisualStudio - `expected '(' to follow 'RUBY_FUNC_EXPORTED'`


March 1, 2024 afternoon update

* Extensions appear to be working correctly now.
  * Matt can you double check everything works on linux?
    * --enable-shared
      * for this one check that `nm .ext/arm64-darwin22/strscan.bundle | grep "GC_In"` has a `T` for the symbol
      * also check `nm libruby.3.4.dylib | grep "GC_Ini"` is a `T` also
    * --enable-shared --enable-shared-gc
    * --enable-shared-gc
* I've pushed a bunch of commits that got the Windows and clang/gcc builds farther along, I also fixed the dependencies build

Things that need to be fixed:


* Should we be setting the install_name for librubygc?
* CI build for this branch
* Adding CI builds for the new enabled-shared-gc. Also we're not testing enable-shared at all
except in ubuntu

March 1, 2024

* All permutations work, but we think we're statically linking the gc in the
extensions when using `--enable-shared`. We don't want to link extensions
to the gc, since it's already linked via libruby.

* Shared gc is working
* Shared gc and ruby is working
* Shared ruby is kind of working, it's a hack, and also see above about exts.
* Static both is working.

Other things that still need to be fixed:

* Should we be setting the install_name for librubygc?
  * Is an install name set on Linux?
  * If so, when?
  * Aaron: when we compile Ruby on Linux, `ldd` doesn't show a full path
  to libruby. We should check what `ldd` says on Ruby _after_ we install it
  (maybe the full path is being set when we install Ruby)
* I noticed lots of builds are failing, even for architectures that don't try
to build a gc. So we need to look at those before we can get a real CI build running.

Feb 29, 2024

* Building with enable shared only is broken
* We need the libruby shared object to statically link against the gc in this case

Here's a handy chart

* Shared gc is working
* Shared both is working
* Share just ruby is broken
* Static? Not sure, haven't run it

        | static | share ruby | shared gc | shared both
-----------------------------------------------------
exts    |        | -lruby     | -lrubygc  | -lruby -lrubygc

libruby |   X    | all .o + -lrubygc-static | -lrubygc  | X


Feb 28, 2024

* We fixed extensions.
* We got linux working

Problems:

* librubygc needs "supported versions" on macos
* Should we be setting the install_name for librubygc?
  * Is an install name set on Linux?
  * If so, when?
  * Aaron: when we compile Ruby on Linux, `ldd` doesn't show a full path
  to libruby. We should check what `ldd` says on Ruby _after_ we install it
  (maybe the full path is being set when we install Ruby)
* `make clean` should delete rubygc.o

Notes:

* We've modified the build system such that librubygc can only be in one C
  file. This is because compiling librubygc may not use the same compile flags
  as the other c files in the system. To address this problem, we added a
  specific make target for rubygc.c. If we want librubygc to use multiple
  files, we'll have to address this in the future.


compile flags in extconf are wrong
they need to link against librubygc
* How are hte flags determined
* Should we be statically linking test programs
  * What do the compile flags look like when Ruby is compiled as a shared library?


friday

* we're statically linking the GC in the extensions, but we want to dynamically link instead.
* modify mkmf changes, just want to link against dylib. mkmf assumes if ruby is static everything is static, need to split the flags.
* do we need to specify a full path to librubygc?
* we should get this working on linux and see what the requirements are there.
