#!/usr/bin/env ruby

require 'getoptlong'
require 'pathname'
require 'tmpdir'
require 'fileutils'
require 'erb'
require 'yaml'
require 'ostruct'

DEFAULT_OUTDIR = Pathname.new(Dir.pwd) + '..' + 'artifacts'

def usage
<<-EOF
Usage: build [-d distros] [-c <dir>] [-j <workers>] [-o <dir>] [-n <name>] [-v <version>]

Options:

  -h, --help
    Displays this message

  -d, --distributions <dist>[,<dist>...]
    Specifies what distribution(s) the package will be built for.

  -o, --output <dir>
    Output directory for generated files, defaults to #{DEFAULT_OUTDIR}.

  -n, --name <name>
    Build a particular package by name
    Requires -v

  -v, --version <version>
    Build a particular version of a particular named package
EOF
end

def run_command(cmd)
  system(cmd)
  raise "command: #{cmd} failed: #{$?.exitstatus}" unless $?.success?
end

def command_output(cmd)
  result = `#{cmd} 2>&1`
  raise "command: #{cmd} failed: #{$?.exitstatus}" unless $?.success?
  result
end

def configure_ruby(src_dir)
  ruby = OpenStruct.new
  ruby.version, ruby.patch_level = get_ruby_version(src_dir)
  ruby.major_minor = get_major_minor(ruby.version)
  ruby.lib_version = "#{ruby.major_minor}.0"
  ruby
end

def configure_package(name, version, ruby, ref)
  package = OpenStruct.new
  package.name = name
  package.doc_name = package.name + '-doc'
  package.provides = "ruby-shopify-any, ruby-shopify-#{ruby.major_minor}"
  package.conflicts = "shopify-ruby"
  package.prefix = Pathname.new('/usr/lib/ruby-shopify') + package.name
  package.version = version
  package.description =
    "#{package.name}, providing Ruby #{ruby.version}p#{ruby.patch_level}, possibly with Shopify-specific modifications. " \
    "Built via pbuilder at #{Time.now} from ref #{ref}"
  package.doc_description = "Documentation for #{package.description}"
  package.changelog = package.description

  package
end

def get_ruby_version(dir)
  raise "version.h does not exist in #{dir}" unless File.exist?(dir + 'version.h')
  version = nil
  patch_level = nil
  version_file = File.read(dir + 'version.h')
  version = $1 if version_file.match(/RUBY_VERSION\s\"(\d+\.\d+\.\d+)\"\s*$/m)
  patch_level = $1 if version_file.match(/RUBY_PATCHLEVEL\s(\d+)\s*$/m)
  raise "version.h is missing ruby version and/or patch level" unless version && patch_level
  [version, patch_level]
end

def get_major_minor(version)
  raise "cannot parse version #{version}" unless /^(\d+\.\d+)/.match(version)
  $1
end

def generate_debian_install_files(target, prefix, files)
  File.open(target, 'w') do |t|
    files.each { |f| t.puts(prefix + f) }
  end
end

def setup_debian(src_dir, dist, name, package_version, ruby_version, ref)
  ruby = configure_ruby(src_dir)
  package = configure_package(name, package_version, ruby, ref)

  raise "Interpolated Ruby version from `version.h` #{ruby.version} doesn't match package name #{package.name}" unless
    ruby.version == ruby_version

  b = binding

  Dir.chdir(src_dir) do
    Dir.glob('debian/**/*.erb') do |filename|
      template = src_dir + filename
      target = template.sub(/\.erb$/, '')
      result = ERB.new(template.read).result(b)
      File.open(target, 'w') { |f| f.print result }
      target.chmod(template.stat.mode)
    end

    run_command("dch --create --package #{package.name} -v '#{package.version}~#{dist}' --force-distribution -D #{dist} '#{package.changelog}'")
    run_command("dch -r '#{package.changelog}'")

    generate_debian_install_files("debian/#{package.name}.install", package.prefix, %w( bin include lib shims ))
    generate_debian_install_files("debian/#{package.doc_name}.install", package.prefix, %w( share/doc share/man share/ri ))
  end
end

def ruby_version_from_package_name(name)
  m = /^ruby-shopify-(?<rv>\d+\.\d+\.\d+)(-[A-Za-z0-9\-]+)?$/.match(name)
  m && m['rv']
end

def build_packages(distros, name, version, debian_dir, out_dir)
  raise "Package name #{name} not valid; must be of the form ruby-shopify-$RUBY_VERSION(-$OPTIONAL_SUFFIX)" unless
    ruby_version = ruby_version_from_package_name(name)

  raise "Package version #{version} not valid; must be a positive integer" unless /^\d+$/ =~ version && version.to_i > 0

  tag = "#{name}_#{version}"
  ref = command_output("git rev-parse #{tag}").chomp
  puts "Building from tag #{tag} (= revision #{ref})"

  distros.each do |d|
    cache_dir = Dir.mktmpdir('ruby-build')
    src_dir = Pathname.new(cache_dir) + 'src'

    run_command("git archive --format tar --prefix=src/ #{ref} | tar xf - -C #{cache_dir}")

    run_command("rm -rf #{src_dir}/debian")
    run_command("cp -nr #{debian_dir} #{src_dir}")
    setup_debian(src_dir, d, name, version, ruby_version, ref)

    Dir.chdir(src_dir) do
      run_command("OUTDIR='#{out_dir}/artifacts' DISTROS='#{d}' do_pbuilder_deploy.sh")
    end

    run_command("rm -rf #{cache_dir}")
  end
end

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--output', '-o', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--distributions', '-d', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--name', '-n', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--version', '-v', GetoptLong::REQUIRED_ARGUMENT ],
)

debian_dir = Pathname.new(File.expand_path(File.dirname(__FILE__))) + 'debian'
out_dir = DEFAULT_OUTDIR
distros = nil
name = nil
version = nil

opts.each do |opt,arg|
  case opt
  when '--help'
    puts usage
    exit 0
  when '--output'
    p = Pathname.new(Dir.pwd) + arg
    FileUtils.mkdir_p("#{p}") unless Dir.exist?(p)
    out_dir = p
  when '--distributions'
    distros = arg.split(',')
  when '--name'
    name = arg.strip unless arg.empty?
  when '--version'
    version = arg.strip
  end
end

raise 'No distro specified' unless distros

raise 'Missing name or version' unless name && version
puts "Building #{name} version #{version}"

build_packages(distros, name, version, debian_dir, out_dir)
